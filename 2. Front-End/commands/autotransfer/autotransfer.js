const commando = require('discord.js-commando');
const fs = require('fs');
var sql = require('mssql');
var essentials = require('../essentials');
var sqlite = require('sqlite3');

class AutoTransferCommand extends commando.Command
{
    constructor(client)
    {
        super(client,{
            name: 'autotransfer',
            group: 'autotransfer',
            memberName: 'autotransfer',
            description: 'Bot auto transfering account to other one'
        });
    }

    async run(message, args)
    {
        if(await essentials.getInfo("AUTOTRANSFERCOMMAND") == "1") return message.channel.send(essentials.getDefaultMessage("commanddisabled"));
        if(args == "usage") return message.channel.send(essentials.getUsageInfo("autotransfer"));
        //Saving Bot ID for logging
        var bot_id = this.client.user.id;

        //Declaring the config file and config information
        var instructions_channel = essentials.getInfo("AUTOTRANSFERINSTRUCTIONSCHANNEL");

        //Receive arguments from command - [Account - Account to be auto transfered, desc - Description of the deal]
        var account = args.split(" ")[0];
        var desc = args.split(" ")[2];
        if(desc == undefined){
            desc = "";
        }

        //Saving Giver ID and Receiver ID - [For logging and security reasons]
        var giver_id = message.author.id;
        var receiver_id = message.mentions.users.first().id;
        
        //Cases variable will hold the amount of cases
        var cases = 0;
        
        //pass and email variables will hold the random credentials which the account will have
        var pass = "";
        var email = "";


        //Try - to fetch Mod Roles
        var modRoles;
        modRoles = essentials.getMods();

        //Try - opening autotransfer cases number
        try{
            fs.readFile('autotransfer.txt', function(err, data) {
                if (err) return console.log(err);
                cases = parseInt(data); 
            });
        }
        catch(err){
            console.log(err);
            message.channel.send(`**[AutoTransferRequest-<@${giver_id}>]** An error occurred, please contact an administrator [Code: 1]`);
            return;
        }

        let AccDB = new sqlite.Database('./db/mubotdata.db');

        //Declaring SQL Connection Variables
        var conn = new sql.ConnectionPool(dbConfig);
        var req = new sql.Request(conn);

        let SCHEMA = essentials.getInfo("SCHEMA"), STATSTBL = essentials.getInfo("STATSTABLE"), MEMBERIDCOL = essentials.getInfo("MEMBERSIDCOL"), INFOTBL = essentials.getInfo("MEMBERSTABLE"),
            CONNECTSTATCOL = essentials.getInfo("CONNECTSTATCOL"), MEMBERPWDCOL = essentials.getInfo("MEMBERSPASSWORDCOL"), MAILADDCOL = essentials.getInfo("MEMBERSMAIL");

        //Checking requierments for autotransfering
        checkReq();
        
        function checkReq()
        {
            AccDB.all(`SELECT discord_id FROM accauth WHERE member_id='${account}'`, [], (err, rows) => {
                if(err) {message.channel.send(essentials.getDefaultMessage("error"));return console.log(err)}
                if(rows.length < 1) return message.channel.send(`**[AutoTransferRequest-<@${giver_id}>]** This account isn't exist / haven't been authiticated yet.`);
                if(rows[0].discord_id != message.author.id) return message.channel.send(`**[AutoTransferRequest-<@${giver_id}>]** This account isn't belong to you.`); 
                transfer();
            });    
        }
        
        function transfer()
        {
            const filter = m => m.content.includes('!accept autotransfer') && m.mentions != undefined && m.mentions.users.first().id == message.author.id && m.author.id == receiver_id;
            const collector = message.channel.createMessageCollector(filter, {time: 30000});
            message.channel.send(`**[AutoTransferRequest-<@${giver_id}>]** Waiting for <@${receiver_id}> to accept by typing \`!accept autotransfer [@Partner]\`, Request will last 30 seconds.`);
            var error = 0;

            collector.on('collect', m=> {   
                //Getting account's info and changing it to random info generated by the bot
                conn.connect(function(_err){
                    //Checking if the account is connected
                    req.query(`SELECT ${CONNECTSTATCOL} FROM [${SCHEMA}].[${STATSTBL}] WHERE ${MEMBERIDCOL}='${account}'`, function(err, data){
                        //Checking if the account have connection record
                        if(data == undefined || data.recordset == undefined || data.rowsAffected.length < 1 || data.rowsAffected[0] == 0){  
                            return message.channel.send(`**[AutoTransferRequest-<@${giver_id}>]** Error occurred while fetching the account's info, the request is canceled.`);
                        }

                        //Checking if the account is online
                        if(data.recordset[0].ConnectStat == 1){
                            return message.channel.send(`**[AutoTransferRequest-<@${giver_id}>]** <@${giver_id}> must disconnect from the account to perform an autotransfer, the request is canceled.`);
                        }

                        else{
                            //If not, Generate new credentials and ready the account to transfer
                            pass = generatePassword();
                            email = generateEmail();

                            req.query(`UPDATE [${SCHEMA}].[${INFOTBL}] SET ${MEMBERPWDCOL}='${pass}', ${MAILADDCOL}='${email}' WHERE ${MEMBERIDCOL}='${account}'`, function(err, data){
                                if(err){
                                    console.log(err);
                                    return message.channel.send(`**[AutoTransferRequest-<@${giver_id}>]** Something went wrong while changing <@${giver_id}> MU account details, the request is canceled.`);
                                }
                            });
                        }
                    });
                });

                if(error == 1) return;

                //Adding to sum of cases
                cases += 1;

                //Saving channel id variable for a future message
                var channel_id = '';

                //Creating a new private channel for the auto transfer
                m.guild.createChannel(`autotransfer-${cases}`,'text').then(c=> {
                    for (var i = 0; i < modRoles.length; i++) {
                        var modRole = message.guild.roles.find("name", modRoles[i]);
                        c.overwritePermissions(modRole, {
                            SEND_MESSAGES: true,
                            READ_MESSAGES: true
                        });
                    }
                    
                    let everyone = message.guild.roles.find("name", "@everyone");
                    c.overwritePermissions(everyone, {
                        SEND_MESSAGES: false,
                        READ_MESSAGES: false
                    });
        
                    c.overwritePermissions(message.mentions.users.first(), {
                        SEND_MESSAGES: true,
                        READ_MESSAGES: true
                    });
                    
                    c.overwritePermissions(message.author, {
                        SEND_MESSAGES: true,
                        READ_MESSAGES: true
                    });

                    c.setTopic(desc);

                    c.setParent(essentials.getInfo("AUTOTRANSFERCATEGORY"));

                    channel_id = c.id;

                    c.send(`<@${giver_id}> & <@${receiver_id}> \n This is a private channel made for you to discuss the terms of the deal\n\n**WARNING**\nYou must read <#${instructions_channel}> before, to know the process and prevent scams.`);
                    message.channel.send(`**[AutoTransferRequest-<@${giver_id}>]** Request has been approved, you and your partner can now discuss in <#${c.id}>`);

                });
                setTimeout(createCaseInfo, 1000);  
            });

            //No accept approval was given from the partner
            collector.on('end', collected =>{
                if(collected.size == 0){
                    message.channel.send(`<@${receiver_id}> Didn't reply in 30s, the request is canceled.`);
                }        
            });
        }

        /*
            CREATECASEINFO() - Creating case information
            Saving case information for security purposes and logging.
            In this step, the account's credentials will be changed and the account will now belong to the bot according to the DiscordAuth Table
        */
        function createCaseInfo() {
            var case_file = `{"giver_id": "${giver_id}", "receiver_id": "${receiver_id}", "account": "${account}", "email": "${email}", "pass": "${pass}", "cancel_id": "${Math.floor(Math.random() * 99999999)}"}`
    
            fs.writeFile(`autotransfer-cases\\${cases}.json`, case_file.toString(), function (err) {
                if (err) return console.log(err);
                console.log(`Case information has been saved [Case Num.${cases}]`);
            });

            fs.writeFile('autotransfer.txt', cases.toString(), function (err) {
                if (err) return console.log(err);
                console.log(`Case number has been changed [Case Num.${cases}]`);
            });

            AccDB.all(`UPDATE accauth SET discord_id='${bot_id}' WHERE member_id='${account}'`, [], (err, rows) => {
                if(err) {message.channel.send(essentials.craftMessage("error", `Error occurred, Contact staff for help`));return console.log(err)}
            });    


        }

        /*
            GENERATEPASSWORD() - Generating a random password for the account
        */
        function generatePassword() {
            var length = 8,
                charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
                retVal = "";
            for (var i = 0, n = charset.length; i < length; ++i) {
                retVal += charset.charAt(Math.floor(Math.random() * n));
            }
            return retVal;
        }

        /*
            GENERATEEMAIL() - Generaing a random email for the account
        */
        function generateEmail() {
            var strValues="abcdefg12345";
            var strEmail = "";
            var strTmp;
            for (var i=0;i<10;i++) {
                strTmp = strValues.charAt(Math.round(strValues.length*Math.random()));
                strEmail = strEmail + strTmp;
            }
            strTmp = "";
            strEmail = strEmail + "@";
            for (var j=0;j<8;j++) {
                strTmp = strValues.charAt(Math.round(strValues.length*Math.random()));
                strEmail = strEmail + strTmp;
            }
            strEmail = strEmail + ".com"
            return strEmail;
        }
    }
}

module.exports = AutoTransferCommand;